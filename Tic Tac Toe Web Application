
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Tic-Tac-Toe</title>
<style>
  body {
    font-family: Arial, sans-serif;
    text-align: center;
  }

  .container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 50px;
  }

  .board {
    display: grid;
    grid-template-columns: repeat(3, 100px);
    grid-gap: 10px;
  }

  .cell {
    width: 100px;
    height: 100px;
    border: 1px solid #000;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 32px;
    cursor: pointer;
  }
</style>
</head>
<body>

<div class="container">
  <h1>Tic-Tac-Toe</h1>
  <div class="board" id="board">
    <div class="cell" onclick="makeMove(0, 0)" id="cell-0-0"></div>
    <div class="cell" onclick="makeMove(0, 1)" id="cell-0-1"></div>
    <div class="cell" onclick="makeMove(0, 2)" id="cell-0-2"></div>
    <div class="cell" onclick="makeMove(1, 0)" id="cell-1-0"></div>
    <div class="cell" onclick="makeMove(1, 1)" id="cell-1-1"></div>
    <div class="cell" onclick="makeMove(1, 2)" id="cell-1-2"></div>
    <div class="cell" onclick="makeMove(2, 0)" id="cell-2-0"></div>
    <div class="cell" onclick="makeMove(2, 1)" id="cell-2-1"></div>
    <div class="cell" onclick="makeMove(2, 2)" id="cell-2-2"></div>
  </div>
  <p id="status"></p>
  <button onclick="reset()">Reset</button>
</div>

<script>
  let currentPlayer = 'X';
  let gameBoard = [
    ['', '', ''],
    ['', '', ''],
    ['', '', '']
  ];
  let gameOver = false;

  function makeMove(row, col) {
    if (!gameOver && gameBoard[row][col] === '') {
      gameBoard[row][col] = currentPlayer;
      document.getElementById(`cell-${row}-${col}`).innerText = currentPlayer;
      checkWin();
      togglePlayer();
    }
  }

  function togglePlayer() {
    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
  }

  function checkWin() {
    const winningCombos = [
      [[0, 0], [0, 1], [0, 2]],
      [[1, 0], [1, 1], [1, 2]],
      [[2, 0], [2, 1], [2, 2]],
      [[0, 0], [1, 0], [2, 0]],
      [[0, 1], [1, 1], [2, 1]],
      [[0, 2], [1, 2], [2, 2]],
      [[0, 0], [1, 1], [2, 2]],
      [[0, 2], [1, 1], [2, 0]]
    ];

    for (let combo of winningCombos) {
      const [a, b, c] = combo;
      const [row1, col1] = a;
      const [row2, col2] = b;
      const [row3, col3] = c;

      if (gameBoard[row1][col1] !== '' && gameBoard[row1][col1] === gameBoard[row2][col2] && gameBoard[row1][col1] === gameBoard[row3][col3]) {
        document.getElementById('status').innerText = `${currentPlayer} wins!`;
        gameOver = true;
        return;
      }
    }

    if (!gameBoard.flat().includes('')) {
      document.getElementById('status').innerText = 'It\'s a draw!';
      gameOver = true;
    }
  }

  function reset() {
    currentPlayer = 'X';
    gameBoard = [
      ['', '', ''],
      ['', '', ''],
      ['', '', '']
    ];
    gameOver = false;
    document.getElementById('status').innerText = '';
    document.querySelectorAll('.cell').forEach(cell => cell.innerText = '');
  }
</script>

</body>
</html>
